'use client';
import { useState, useEffect } from 'react';
import { useRouter } from 'next/navigation';
import { Card, CardContent, CardHeader, CardTitle, CardFooter } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { useWorkspaceStore } from '@/lib/stores/workspace-store';
import { api } from '@/lib/api';
import { formatDate, toTitleCase } from '@/lib/utils';
import { toast } from 'react-hot-toast';
import {
    PencilIcon,
    DocumentTextIcon,
    LightBulbIcon,
    MagnifyingGlassIcon,
    TrashIcon,
    ArrowLeftIcon,
} from '@heroicons/react/24/outline';

// Define tab types
type TabType = 'content' | 'ideas' | 'research' | 'metadata';

// Define content status types
type ContentStatus = 'draft' | 'review' | 'published' | 'archived';

interface ContentDetailProps {
    params: {
        id: string;
    };
}

export default function ContentDetailPage({ params }: ContentDetailProps) {
    const router = useRouter();
    const { selectedWorkspace } = useWorkspaceStore();
    const [content, setContent] = useState<any>(null);
    const [isLoading, setIsLoading] = useState(true);
    const [isEditing, setIsEditing] = useState(false);
    const [editedContent, setEditedContent] = useState('');
    const [isDeleting, setIsDeleting] = useState(false);
    const [activeTab, setActiveTab] = useState<TabType>('content');

    useEffect(() => {
        if (!selectedWorkspace) return;

        async function fetchContent() {
            try {
                setIsLoading(true);

                // In a real app, this would fetch content from the API
                // For now, we'll simulate the API call with a timeout
                setTimeout(() => {
                    // Mock data based on the ID
                    const mockContent = {
                        id: params.id,
                        title: params.id === '1'
                            ? 'How to Improve Your Marketing Strategy'
                            : params.id === '2'
                                ? 'Announcing Our New Product Launch'
                                : 'Tips for Growing Your Social Media Presence',
                        content_type: params.id === '1'
                            ? 'blog'
                            : params.id === '2'
                                ? 'email'
                                : 'social_post',
                        status: params.id === '1'
                            ? 'published'
                            : params.id === '2'
                                ? 'draft'
                                : 'review',
                        created_at: '2023-06-15T10:30:00Z',
                        updated_at: '2023-06-16T14:45:00Z',
                        content: {
                            text: `<h2>This is a sample ${params.id === '1'
                                ? 'blog post'
                                : params.id === '2'
                                    ? 'email'
                                    : 'social media post'}</h2>
              <p>This is a sample content that would be generated by the AI based on your inputs.</p>
              <p>In a real application, this would be fetched from the database.</p>
              <ul>
                <li>Key point 1</li>
                <li>Key point 2</li>
                <li>Key point 3</li>
              </ul>
              <p>Thank you for using Encanta!</p>`,
                            ideas: "1. AI-Powered Personalization\n2. Predictive Analytics in Marketing\n3. Content Creation and AI",
                            research: "According to recent studies, 83% of marketers are already using some form of AI...",
                            metadata: {
                                topic: 'Marketing',
                                target_audience: 'Small Business Owners',
                                tone: 'professional',
                                key_points: 'Point 1\nPoint 2\nPoint 3',
                                brand_profile_id: null,
                                used_knowledge_base: true
                            }
                        }
                    };

                    setContent(mockContent);
                    setEditedContent(mockContent.content.text);
                    setIsLoading(false);
                }, 1000);

                // The real implementation would look like this:
                /*
                const contentData = await api.content.getById(params.id);
                setContent(contentData);
                setEditedContent(contentData.content.text);
                setIsLoading(false);
                */
            } catch (error) {
                console.error('Error fetching content:', error);
                toast.error('Failed to load content');
                router.push('/dashboard/content');
                setIsLoading(false);
            }
        }

        fetchContent();
    }, [params.id, selectedWorkspace]);

    // Save edited content
    async function handleSaveContent() {
        try {
            // Update content and exit edit mode
            setContent({
                ...content,
                content: {
                    ...content.content,
                    text: editedContent
                },
                updated_at: new Date().toISOString()
            });
            setIsEditing(false);
            toast.success('Content updated successfully');

            // In a real implementation, we would save to the API here
        } catch (error) {
            toast.error('Failed to update content');
        }
    }

    // Delete content
    async function handleDeleteContent() {
        if (!confirm('Are you sure you want to delete this content? This cannot be undone.')) {
            return;
        }

        setIsDeleting(true);

        try {
            // In a real implementation, we would delete via the API here
            toast.success('Content deleted successfully');
            router.push('/dashboard/content');
        } catch (error) {
            toast.error('Failed to delete content');
            setIsDeleting(false);
        }
    }

    // Convert status to display format
    function formatStatus(status: string): { label: string; color: string } {
        const statusMap: Record<ContentStatus, { label: string; color: string }> = {
            draft: { label: 'Draft', color: 'bg-yellow-100 text-yellow-800' },
            review: { label: 'In Review', color: 'bg-blue-100 text-blue-800' },
            published: { label: 'Published', color: 'bg-green-100 text-green-800' },
            archived: { label: 'Archived', color: 'bg-gray-100 text-gray-800' }
        };

        return statusMap[status as ContentStatus] || { label: status, color: 'bg-gray-100 text-gray-800' };
    }

    if (!selectedWorkspace) {
        return (
            <div className="flex flex-col items-center justify-center h-full">
                <p className="text-gray-500 mb-4">Please select a workspace first</p>
                <Button onClick={() => router.push('/dashboard/workspaces')}>
                    Go to Workspaces
                </Button>
            </div>
        );
    }

    if (isLoading) {
        return (
            <div className="animate-pulse space-y-4">
                <div className="h-8 bg-gray-200 rounded w-1/3 mb-2"></div>
                <div className="h-4 bg-gray-200 rounded w-1/4 mb-8"></div>
                <div className="h-64 bg-gray-100 rounded"></div>
            </div>
        );
    }

    return (
        <div className="space-y-6">
            <div className="flex items-center justify-between">
                <div className="flex items-center">
                    <Button
                        variant="ghost"
                        size="sm"
                        onClick={() => router.back()}
                        className="mr-4"
                    >
                        <ArrowLeftIcon className="h-5 w-5 mr-1" />
                        Back
                    </Button>

                    <div>
                        <h1 className="text-3xl font-bold">{content.title}</h1>
                        <div className="flex items-center mt-1 text-gray-500">
                            <span className="capitalize">{toTitleCase(content.content_type)}</span>
                            <span className="mx-2">•</span>
                            <span className={`px-2 inline-flex text-xs leading-5 font-semibold rounded-full ${formatStatus(content.status).color
                                }`}>
                                {formatStatus(content.status).label}
                            </span>
                            <span className="mx-2">•</span>
                            <span>Created {formatDate(content.created_at)}</span>
                        </div>
                    </div>
                </div>

                <div className="flex space-x-2">
                    {!isEditing && (
                        <>
                            <Button
                                variant="outline"
                                onClick={() => setIsEditing(true)}
                            >
                                <PencilIcon className="h-4 w-4 mr-2" />
                                Edit
                            </Button>
                            <Button
                                variant="destructive"
                                onClick={handleDeleteContent}
                                disabled={isDeleting}
                            >
                                <TrashIcon className="h-4 w-4 mr-2" />
                                {isDeleting ? 'Deleting...' : 'Delete'}
                            </Button>
                        </>
                    )}
                </div>
            </div>

            {/* Custom tabs implementation */}
            <div className="border-b border-gray-200">
                <nav className="-mb-px flex space-x-8">
                    {(['content', 'ideas', 'research', 'metadata'] as const).map((tab) => (
                        <button
                            key={tab}
                            onClick={() => setActiveTab(tab)}
                            className={`whitespace-nowrap py-4 px-1 border-b-2 font-medium text-sm ${activeTab === tab
                                ? 'border-indigo-500 text-indigo-600'
                                : 'border-transparent text-gray-500 hover:text-gray-700 hover:border-gray-300'
                                }`}
                        >
                            {tab.charAt(0).toUpperCase() + tab.slice(1)}
                        </button>
                    ))}
                </nav>
            </div>

            {/* Tab content */}
            {activeTab === 'content' && (
                <div className="md:col-span-2">
                    <Card>
                        <CardHeader>
                            <CardTitle>Content</CardTitle>
                        </CardHeader>
                        {isEditing ? (
                            <CardContent>
                                <textarea
                                    className="w-full h-96 p-4 border rounded-md font-mono text-sm"
                                    value={editedContent}
                                    onChange={(e) => setEditedContent(e.target.value)}
                                />
                                <div className="flex justify-end space-x-2 mt-4">
                                    <Button variant="outline" onClick={() => {
                                        setIsEditing(false);
                                        setEditedContent(content.content.text);
                                    }}>
                                        Cancel
                                    </Button>
                                    <Button onClick={handleSaveContent}>
                                        Save Changes
                                    </Button>
                                </div>
                            </CardContent>
                        ) : (
                            <CardContent>
                                <div
                                    className="prose max-w-none"
                                    dangerouslySetInnerHTML={{ __html: content.content.text }}
                                />
                            </CardContent>
                        )}
                    </Card>
                </div>
            )}

            {activeTab === 'ideas' && (
                <Card>
                    <CardHeader>
                        <CardTitle className="flex items-center">
                            <LightBulbIcon className="h-5 w-5 mr-2 text-amber-500" />
                            Content Ideas
                        </CardTitle>
                    </CardHeader>
                    <CardContent>
                        <div className="whitespace-pre-wrap bg-gray-50 p-4 rounded-md text-gray-700">
                            {content.content.ideas || "No ideas recorded for this content."}
                        </div>
                    </CardContent>
                </Card>
            )}

            {activeTab === 'research' && (
                <Card>
                    <CardHeader>
                        <CardTitle className="flex items-center">
                            <MagnifyingGlassIcon className="h-5 w-5 mr-2 text-blue-500" />
                            Research
                        </CardTitle>
                    </CardHeader>
                    <CardContent>
                        <div className="whitespace-pre-wrap bg-gray-50 p-4 rounded-md text-gray-700">
                            {content.content.research || "No research recorded for this content."}
                        </div>
                    </CardContent>
                </Card>
            )}

            {activeTab === 'metadata' && (
                <Card>
                    <CardHeader>
                        <CardTitle>Metadata</CardTitle>
                    </CardHeader>
                    <CardContent className="space-y-4">
                        <div>
                            <h3 className="text-sm font-medium text-gray-500">Topic</h3>
                            <p>{content.content.metadata.topic}</p>
                        </div>
                        <div>
                            <h3 className="text-sm font-medium text-gray-500">Target Audience</h3>
                            <p>{content.content.metadata.target_audience}</p>
                        </div>
                        <div>
                            <h3 className="text-sm font-medium text-gray-500">Tone</h3>
                            <p className="capitalize">{content.content.metadata.tone}</p>
                        </div>
                        {content.content.metadata.key_points && (
                            <div>
                                <h3 className="text-sm font-medium text-gray-500">Key Points</h3>
                                <ul className="list-disc pl-5 mt-1">
                                    {content.content.metadata.key_points.split('\n').map((point: string, index: number) => (
                                        <li key={index}>{point}</li>
                                    ))}
                                </ul>
                            </div>
                        )}
                        <div>
                            <h3 className="text-sm font-medium text-gray-500">Used Brand Profile</h3>
                            <p>{content.content.metadata.brand_profile_id ? "Yes" : "No"}</p>
                        </div>
                        <div>
                            <h3 className="text-sm font-medium text-gray-500">Used Knowledge Base</h3>
                            <p>{content.content.metadata.used_knowledge_base ? "Yes" : "No"}</p>
                        </div>
                        <div>
                            <h3 className="text-sm font-medium text-gray-500">Created</h3>
                            <p>{formatDate(content.created_at)}</p>
                        </div>
                        <div>
                            <h3 className="text-sm font-medium text-gray-500">Last Updated</h3>
                            <p>{formatDate(content.updated_at)}</p>
                        </div>
                    </CardContent>
                </Card>
            )}
        </div>
    );
} 